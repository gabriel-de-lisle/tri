// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: protocol/tri.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskHandlerClient is the client API for TaskHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskHandlerClient interface {
	// Sends a greeting
	AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskReply, error)
	SetDoneTask(ctx context.Context, in *SetDoneTaskRequest, opts ...grpc.CallOption) (*SetDoneTaskReply, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskReply, error)
}

type taskHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskHandlerClient(cc grpc.ClientConnInterface) TaskHandlerClient {
	return &taskHandlerClient{cc}
}

func (c *taskHandlerClient) AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskReply, error) {
	out := new(AddTaskReply)
	err := c.cc.Invoke(ctx, "/TaskHandler/AddTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHandlerClient) SetDoneTask(ctx context.Context, in *SetDoneTaskRequest, opts ...grpc.CallOption) (*SetDoneTaskReply, error) {
	out := new(SetDoneTaskReply)
	err := c.cc.Invoke(ctx, "/TaskHandler/SetDoneTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHandlerClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskReply, error) {
	out := new(GetTaskReply)
	err := c.cc.Invoke(ctx, "/TaskHandler/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskHandlerServer is the server API for TaskHandler service.
// All implementations must embed UnimplementedTaskHandlerServer
// for forward compatibility
type TaskHandlerServer interface {
	// Sends a greeting
	AddTask(context.Context, *AddTaskRequest) (*AddTaskReply, error)
	SetDoneTask(context.Context, *SetDoneTaskRequest) (*SetDoneTaskReply, error)
	GetTask(context.Context, *GetTaskRequest) (*GetTaskReply, error)
	mustEmbedUnimplementedTaskHandlerServer()
}

// UnimplementedTaskHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedTaskHandlerServer struct {
}

func (UnimplementedTaskHandlerServer) AddTask(context.Context, *AddTaskRequest) (*AddTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedTaskHandlerServer) SetDoneTask(context.Context, *SetDoneTaskRequest) (*SetDoneTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDoneTask not implemented")
}
func (UnimplementedTaskHandlerServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTaskHandlerServer) mustEmbedUnimplementedTaskHandlerServer() {}

// UnsafeTaskHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskHandlerServer will
// result in compilation errors.
type UnsafeTaskHandlerServer interface {
	mustEmbedUnimplementedTaskHandlerServer()
}

func RegisterTaskHandlerServer(s grpc.ServiceRegistrar, srv TaskHandlerServer) {
	s.RegisterService(&TaskHandler_ServiceDesc, srv)
}

func _TaskHandler_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHandlerServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TaskHandler/AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHandlerServer).AddTask(ctx, req.(*AddTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHandler_SetDoneTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDoneTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHandlerServer).SetDoneTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TaskHandler/SetDoneTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHandlerServer).SetDoneTask(ctx, req.(*SetDoneTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHandler_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHandlerServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TaskHandler/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHandlerServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskHandler_ServiceDesc is the grpc.ServiceDesc for TaskHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TaskHandler",
	HandlerType: (*TaskHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTask",
			Handler:    _TaskHandler_AddTask_Handler,
		},
		{
			MethodName: "SetDoneTask",
			Handler:    _TaskHandler_SetDoneTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _TaskHandler_GetTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/tri.proto",
}
